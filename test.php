<?php
include 'lib/include.inc';
/**
 * This file contains a framework that demonstrates a different approach to writing HTML that is generated by PHP.
 * It uses MVC concepts, as well as abstraction, inheritance, and dependency inversion to programmatically generate
 * the HTML, and can easily be extended to add custom views.
 */

//A CRUD interface would likely be able to generate a 2D array for us, but we'll generate one real quick
//This information would be pulled from the model, as needed
function getArrayFromModel() {
    $array = array();
    if (!isset($_SESSION['showEntities'])) {
        $_SESSION['showEntities'] = true;
    }
    if (!isset($_SESSION['radioButton'])) {
        $_SESSION['radioButton'] = "two";
    }
    for ($i = 0; $i < 5; $i++) {
        $inner = array();
        for ($j = 0; $j < 5; $j++) {
            $inner[] = "$i $j" . ($_SESSION['showEntities'] ? " <escaped entities>" : "") . " " . $_SESSION['radioButton'];
        }
        $array[] = $inner;
    }
    return $array;
}

function setModelData($showEntities, $radioButton) {
    $_SESSION['showEntities'] = $showEntities;
    $_SESSION['radioButton'] = $radioButton;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// For convenience, everything is in one file, but the code below is the only thing that would be in the controller, normally
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
session_start();
$manager = new HTMLPageManager();

$manager->addComponent("table", function($manager) {
    $array = getArrayFromModel();
    $array[0][0] = new HTMLA($array[0][0], "http://www.google.com");
    $array[0][1] = date("G:i.s");
    $table = new HTMLTable($array);
    //Add Our header/footer and attributes
    $table->addCSSBlock("table thead tr th", array("background-color" => "purple"));
    $table->addCSSBlock("table tfoot tr th", array("background-color" => "green"));
    $table->addCSSBlock(".odd td", array("background-color" => "gray"));
    $table->addFooterArray(array("This", "is", "the", "footer", "yay"));
    $table->addHeaderArray(array("This", "is", "the", "header", "yay"));
    //We do want the border
    $table->enableBorder(true);
    $table->setId("hi");

    //We want custom rendering per row
    $table->addRowRenderer(function($num) {
                if ($num % 2 == 0) {
                    return array("class" => "odd");
                } else {
                    return array("class" => "even");
                }
            });
    return $table;
});

$formOptions = new HTMLFormOptions();
$formOptions->dialogOptions = array("modal" => "true");
$formOptions->validationOptions = array("text" => array('type' => 'string', 'minlen' => '2'));
$formOptions->isAsync = false;
//$formOptions->regen = array("table");
$manager->addForm("form", function($manager) {
    $form = new HTMLForm();    
    $form->addView(new HTMLBlock(new HTMLCheckboxInput("name", "Hi!", true)));
    $form->addView(new HTMLBlock(new HTMLRadioGroup("radio", array("one" => "One", "two" => "Two", "three" => "Three"), "two")));
    $form->addView(new HTMLBlock("Text: ", new HTMLTextInput("text")));
    $form->addView(new HTMLSubmitResetCancelInput("", ""));
    $form->setFieldsetName("Fieldset");
    $form->setMethod(HTMLForm::POST);
    return $form;
}, function($req) {
    setModelData($req['name'], $req['radio']);
}, $formOptions);

$manager->registerView("main", function($manager) {
    //Now, let's create the page, and add our table to it.
    $frame = new HTMLPage();
    $frame->setPageTitle("Title")->
            addMetaTag(new HTMLMeta("This is the page", "description"));
    $img = new HTMLImg("http://www.w3schools.com/images/compatible_firefox.gif", "firefox logo");
    $frame->appendContent($img)-> //If we didn't provide alt text, this would give an error    
            appendContent($manager->getComponent("table"))-> //Adds the table to the content area of the page
            appendContent(new HTMLShowFormButton("form", "Show Form"))->
            appendContent(new HTMLBlock(new HTMLShowViewButton("view2", "Go to View 2")));
    return $frame;
});

$manager->registerView("view2", function($manager) {
    $frame = new HTMLPage();
    $frame->setPageTitle("View 2")->
            appendContent(new HTMLShowViewButton("main", "Go back to main view"))->
            appendContent($manager->getComponent("table"))->
            appendContent(new HTMLUnorderedlist(array("bat", "cat", "hat")))->
            appendContent(new HTMLOrderedList(array("one", "two", "three")));
    return $frame;
});

$manager->setWrapperGenerator(function($manager, $content) {
    $page = new HTMLPage($content);
    return $page;
});

$manager->handle();
?>
